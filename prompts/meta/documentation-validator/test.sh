#!/bin/bash

# Test script for documentation-validator prompt
# Validates JSON structure, required fields, and functionality

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROMPT_FILE="$SCRIPT_DIR/documentation-validator.json"

echo "üîç Testing Documentation Validator Prompt..."
echo "======================================================"

# Check if prompt file exists
if [ ! -f "$PROMPT_FILE" ]; then
    echo "‚ùå Prompt file not found: $PROMPT_FILE"
    exit 1
fi

echo "‚úÖ Prompt file exists: $PROMPT_FILE"

# Validate JSON syntax
if ! jq . "$PROMPT_FILE" > /dev/null 2>&1; then
    echo "‚ùå Invalid JSON syntax"
    exit 1
fi

echo "‚úÖ Valid JSON syntax"

# Extract content for validation
SYSTEM_CONTENT=$(jq -r '.messages[0].content // empty' "$PROMPT_FILE")
USER_CONTENT=$(jq -r '.messages[1].content // empty' "$PROMPT_FILE")

echo ""
echo "üìã Schema validation..."

# Validate required fields
REQUIRED_FIELDS=("name" "target_model" "parameters" "messages")
for field in "${REQUIRED_FIELDS[@]}"; do
    if jq -e ".$field" "$PROMPT_FILE" > /dev/null; then
        echo "‚úÖ Required field present: $field"
    else
        echo "‚ùå Missing required field: $field"
        exit 1
    fi
done

# Validate parameters
REASONING_EFFORT=$(jq -r '.parameters.reasoning_effort // "not_specified"' "$PROMPT_FILE")
VERBOSITY=$(jq -r '.parameters.verbosity // "not_specified"' "$PROMPT_FILE")

if [[ "$REASONING_EFFORT" == "high" ]]; then
    echo "‚úÖ Appropriate reasoning effort: $REASONING_EFFORT"
else
    echo "‚ùå Inappropriate reasoning effort for validation analysis: $REASONING_EFFORT"
    exit 1
fi

if [[ "$VERBOSITY" == "medium" ]]; then
    echo "‚úÖ Appropriate verbosity for validation reports: $VERBOSITY"
else
    echo "‚ùå Suboptimal verbosity for detailed validation reports: $VERBOSITY"
    exit 1
fi

echo ""
echo "üéØ Role and functionality validation..."

# Validate role specification
if echo "$SYSTEM_CONTENT" | grep -q -i "documentation.*validator"; then
    echo "‚úÖ Documentation Validator role specified"
else
    echo "‚ùå Missing Documentation Validator role"
    exit 1
fi

# Validate core capabilities
if echo "$SYSTEM_CONTENT" | grep -q -i "json.*markdown.*consistency"; then
    echo "‚úÖ JSON ‚Üî markdown consistency validation specified"
else
    echo "‚ùå Missing core consistency validation capability"
    exit 1
fi

# Validate validation framework
if echo "$SYSTEM_CONTENT" | grep -q -i "validation.*framework"; then
    echo "‚úÖ Structured validation framework specified"
else
    echo "‚ùå Missing validation framework"
    exit 1
fi

# Validate output structure requirements
if echo "$SYSTEM_CONTENT" | grep -q -i "validation.*report.*format"; then
    echo "‚úÖ Structured report format specified"
else
    echo "‚ùå Missing report format specification"
    exit 1
fi

echo ""
echo "üìã Input template validation..."

# Validate input template sections
INPUT_SECTIONS=("PROMPT_FOLDER_PATH" "JSON_CONTENT" "MARKDOWN_CONTENT" "VALIDATION_FOCUS" "QUALITY_STANDARDS")
MISSING_INPUT_SECTIONS=()
for section in "${INPUT_SECTIONS[@]}"; do
    if echo "$USER_CONTENT" | grep -q "$section"; then
        echo "‚úÖ Input template section: $section"
    else
        MISSING_INPUT_SECTIONS+=("$section")
    fi
done

if [ ${#MISSING_INPUT_SECTIONS[@]} -gt 0 ]; then
    echo "‚ùå Missing input template sections: ${MISSING_INPUT_SECTIONS[*]}"
    exit 1
fi

# Validate required vs optional sections
if echo "$USER_CONTENT" | grep -q -i "optional"; then
    echo "‚úÖ Optional sections marked appropriately"
else
    echo "‚ùå Missing optional section markings"
    exit 1
fi

echo ""
echo "üîç Validation scope verification..."

# Validate comprehensive analysis approach
if echo "$SYSTEM_CONTENT" | grep -q -i "comprehensive.*analysis"; then
    echo "‚úÖ Comprehensive analysis approach specified"
else
    echo "‚ùå Missing comprehensive analysis requirement"
    exit 1
fi

# Validate gap identification capability
if echo "$SYSTEM_CONTENT" | grep -q -i "gap.*analysis\\|missing.*element"; then
    echo "‚úÖ Gap identification capability specified"
else
    echo "‚ùå Missing gap identification capability"
    exit 1
fi

# Validate remediation guidance
if echo "$SYSTEM_CONTENT" | grep -q -i "remediation.*plan\\|actionable.*improvement"; then
    echo "‚úÖ Remediation guidance capability specified"
else
    echo "‚ùå Missing remediation guidance capability"
    exit 1
fi

# Validate DRY principles check
if echo "$SYSTEM_CONTENT" | grep -q -i "dry.*principle\\|executable.*content.*duplication"; then
    echo "‚úÖ DRY principles validation specified"
else
    echo "‚ùå Missing DRY principles validation"
    exit 1
fi

echo ""
echo "üìä Quality assurance validation..."

# Validate quality scoring capability
if echo "$SYSTEM_CONTENT" | grep -q -i "quality.*score\\|quantitative.*assessment"; then
    echo "‚úÖ Quality scoring capability specified"
else
    echo "‚ùå Missing quality scoring capability"
    exit 1
fi

# Validate input variables documentation
INPUT_VARS=$(jq -r '.input_variables // {} | keys[]' "$PROMPT_FILE" 2>/dev/null || echo "")
if [ -n "$INPUT_VARS" ]; then
    echo "‚úÖ Input variables documented"
else
    echo "‚ùå Missing input variables documentation"
    exit 1
fi

# Validate assumptions presence
ASSUMPTIONS=$(jq -r '.assumptions // [] | length' "$PROMPT_FILE")
if [ "$ASSUMPTIONS" -gt 0 ]; then
    echo "‚úÖ Assumptions documented ($ASSUMPTIONS items)"
else
    echo "‚ùå Missing assumptions documentation"
    exit 1
fi

# Validate risks documentation
RISKS=$(jq -r '.risks_or_notes // [] | length' "$PROMPT_FILE")
if [ "$RISKS" -gt 0 ]; then
    echo "‚úÖ Risks and limitations documented ($RISKS items)"
else
    echo "‚ùå Missing risks documentation"
    exit 1
fi

echo ""
echo "üéâ All tests passed! Documentation Validator prompt is valid and functional."
echo ""